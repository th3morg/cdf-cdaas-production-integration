version: v1
kind: kubernetes
application: th3morg-nginx # The name of the application to deploy.
targets: # Map of your deployment target, Borealis supports deploying to one target cluster.
  th3morg-dev: # Name for your deployment. Use a descriptive value such as the environment name.
    account: cdf-eks-agent-1
    # Optionally override the namespaces that are in the manifests
    namespace: th3morg-dev # (Recommended) Set the namespace that the app gets deployed to. Overrides the namespaces that are in your manifests
    strategy: rolling # A named strategy from the strategies block. This example uses the name strategy1.
    constraints:
    #   # A set of steps that are executed in parallel, after the deployment is run
    #   afterDeployment:
    #     - runWebhook: # The map key is the step type
    #         name: potato-fact-checker # The name of a defined webhook

      # Defines the deployments that must reach a successful state (defined as status == SUCCEEDED) before this deployment can start.Deployments with the same dependsOn criteria will execute in parallel.
      dependsOn: []
  th3morg-staging: # Name for your deployment. Use a descriptive value such as the environment name.
    account: cdf-eks-agent-1
    # Optionally override the namespaces that are in the manifests
    namespace: th3morg-staging # (Recommended) Set the namespace that the app gets deployed to. Overrides the namespaces that are in your manifests
    strategy: mycanary # A named strategy from the strategies block. This example uses the name strategy1.
    constraints:
      # Defines the deployments that must reach a successful state (defined as status == SUCCEEDED) before this deployment can start.Deployments with the same dependsOn criteria will execute in parallel.
      dependsOn: ["th3morg-dev"]
  th3morg-prod: # Name for your deployment. Use a descriptive value such as the environment name.
    account: cdf-eks-agent-1
    # Optionally override the namespaces that are in the manifests
    namespace: th3morg-rna # (Recommended) Set the namespace that the app gets deployed to. Overrides the namespaces that are in your manifests
    strategy: mycanary # A named strategy from the strategies block. This example uses the name strategy1.
    constraints:
      # Defines the deployments that must reach a successful state (defined as status == SUCCEEDED) before this deployment can start.Deployments with the same dependsOn criteria will execute in parallel.
      dependsOn: ["th3morg-staging"]
      # beforeDeployment:
      #   - runWebhook: # The map key is the step type
      #       name: potato-fact-checker # The name of a defined webhook
# The list of manifests sources
manifests:
  # This will read all yaml|yml files in a dir and deploy all manifests in that directory to all targets.
  - path: manifests/th3morg-nginx.yml
  # - targets: ["th3morg-dev"]
  #   inline: >-
  #     apiVersion: v1
  #     kind: ConfigMap
  #     metadata:
  #       name: ryan-demo-dev
  #     data:
  #       # property-like keys; each key maps to a simple value
  #       some_other_thing: "shiny-manatee"
  # - targets: [th3morg-prod,th3morg-staging]
  #   inline: |-
  #     apiVersion: v1
  #     kind: ConfigMap
  #     metadata:
  #       name: works-stage-prod
  #     data:
  #       # property-like keys; each key maps to a simple value
  #       some_other_thing: "matte-otter"
  # - targets: [th3morg-staging,th3morg-prod]
  #   inline: |-
  #     apiVersion: v1
  #     kind: ConfigMap
  #     metadata:
  #       name: not-ignored-stage-prod
  #     data:
  #       # property-like keys; each key maps to a simple value
  #       some_other_thing: "sad-otter"
  - path: manifests/configmaps
    targets:
      - th3morg-staging
      - th3morg-dev

# The map of strategies, a deployment target will reference one of these
strategies:
  # this is the name for the strategy
  mycanary:
    # This map key, is the deployment strategy type
    canary:
        # List of canary steps
        steps:
          # The map key is the step type
          - setWeight:
              weight: 25
          # - runWebhook:
          #     name: potato-fact-checker
          #- pause:
          #    untilApproved: true
          - setWeight:
              weight: 100
  rolling:
    canary:
      steps:
      - setWeight:
          weight: 100

# Define webhooks to be executed before, after or during deployment.
webhooks:
  - name: potato-fact-checker
    method: POST
    uriTemplate: http://th3morg-potato-facts-service.th3morg-dev/webhooks
    headers:
      - key: Content-Type
        value: application/json
    networkMode: remoteNetworkAgent # Optional: direct or remoteNetworkAgent
    agentIdentifier: cdf-eks-agent-1 # Optional: name of agent or account that has a remote network agent configured
    # Optional: number of times to execute the webhook again if the trigger is unsuccessful
    retryCount: 2
    bodyTemplate:
      inline: >-
        {
          "callbackUri": "{{armory.callbackUri}}/callback",
          "responseSuccess": true,
          "forceStatus": 200,
          "sleepMs": 5000
        }
  - name: run integration test # Name of the webhook
    method: POST # HTTP Method
    # HTTP headers for the request. i.e. for Authorization or ContentType
    headers:
      - key: Authorization
        value: token {{secrets.ghaToken}}
    uriTemplate: https://api.github.com/repos/armory-io/{{context.demo-repo}}/dispatches # the URI for the HTTP request
    networkMode: direct # Optional: direct or remoteNetworkAgent
    agentIdentifier: cdf-eks-agent-1 # Optional: name of agent or account that has a remote network agent configured
    # Optional: number of times to execute the webhook again if the trigger is unsuccessful
    retryCount: 5
    bodyTemplate:
      inline: >-
        {
          "event_type": "webhookCallback",
          "client_payload": {
            "callbackUri": "{{armory.callbackUri}}/callback"
          }
        }
